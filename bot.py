import logging
from datetime import datetime
from pathlib import Path
import os
import sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)

# ======= –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==========
BASE_DIR = Path(__file__).parent
LOG_FILE = BASE_DIR / "easycash_bot.log"

def setup_logging():
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    if logger.hasHandlers():
        logger.handlers.clear()

    file_handler = logging.FileHandler(LOG_FILE, encoding='utf-8', mode='a')
    file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
    logger.addHandler(file_handler)

    stream_handler = logging.StreamHandler(sys.stdout)
    stream_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
    logger.addHandler(stream_handler)

    logger.info("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ. –õ–æ–≥-—Ñ–∞–π–ª: %s", LOG_FILE)
    return logger

logger = setup_logging()

# ======= –ö–û–ù–§–ò–ì ==========
TOKEN = "7640066117:AAE9YxmQylPm2F63BOjEn8vxMQHfNLKvB7A"
ADMIN_ID = 752119100
WELCOME_IMAGE = BASE_DIR / "images/welcome.png"
SIGNAL_IMAGE = BASE_DIR / "images/welcome.png"

bot_stats = {
    "total_users": set(),
    "active_sessions": set(),
    "signals_sent": 0,
    "help_requests": 0,
    "stats_requests": 0
}

# ======= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={user.id}, –ò–º—è={user.first_name}")
        bot_stats["total_users"].add(user.id)
        bot_stats["active_sessions"].add(update.effective_chat.id)

        keyboard = [
            [InlineKeyboardButton("üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")],
            [InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal")],
            [InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        with open(WELCOME_IMAGE, 'rb') as photo:
            await update.message.reply_photo(
                photo=InputFile(photo),
                caption=f"üëã{user.first_name}, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>EASYCASH SOFT BOT</b>!\n\n"
                        "üí£ –í –±–æ—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ 20 –∏–≥—Ä: Mines, Luckyjet, Coinflip –∏ –¥—Ä—É–≥–∏–µ —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º –≥–µ–π–º–ø–ª–µ–µ–º, –≥–¥–µ –º–æ–∂–Ω–æ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É.\n\n"
                        "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø–µ—Ä–µ–¥–æ–≤–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ - Chat GPT 4o, –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—è —Ö–æ–¥—ã —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.",
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {str(e)}", exc_info=True)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {query.data} –æ—Ç {query.from_user.id}")
        if query.data == "get_signal":
            bot_stats["signals_sent"] += 1
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu")]]
            
            with open(SIGNAL_IMAGE, 'rb') as photo:
                await query.message.reply_photo(
                    photo=InputFile(photo),
                    caption=(
                        "üëë –ü—Ä–∏–≤–µ—Ç! –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ –ø—Ä–æ–π–¥–∏ –±—ã—Å—Ç—Ä—É—é <a href='https://1wilib.life/casino/list?open=register&p=1vph'>—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ 1WIN (CLICK)</a>.\n\n"
                        "‚ö†Ô∏è –í–∞–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å <b>–Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç</b> –ø–æ —Å—Å—ã–ª–∫–µ ‚Äî –ø–æ —Ä–∞–Ω–µ–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, "
                        "–∞ —Ç–∞–∫–∂–µ <b>–±–µ–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π</b>. –ï—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ <a href='https://1wilib.life/casino/list?open=register&p=1vph'>1WIN</a>, –≤—ã–π–¥–∏ –∏–∑ –Ω–µ–≥–æ.\n\n"
                        "1. –ù–∞–∂–º–∏ –Ω–∞ —Å–ª–æ–≤–æ <a href='https://1wilib.life/casino/list?open=register&p=1vph'>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>, –≤–∫–ª—é—á–∏ —Ä–µ–∂–∏–º <b>–∏–Ω–∫–æ–≥–Ω–∏—Ç–æ</b> –∏ –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å–∞–π—Ç.\n"
                        "2. –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–∏ –ø—Ä–æ–º–æ-–∫–æ–¥ <b>EASYCASINO</b>.\n"
                        "3. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç 2000 ‚ÇΩ).\n"
                        "4. –ü–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª 1WIN Games –∏ –≤—ã–±–µ—Ä–∏ –∏–≥—Ä—É.\n"
                        "5. –ù–∞–∂–º–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª¬ª –≤ –º–µ–Ω—é.\n"
                        "(‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –Ω–æ –±–æ—Ç –≤–∞—Å –Ω–µ –≤–∏–¥–∏—Ç - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–≤–æ–∫ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ö–µ–ª–ø–µ—Ä—É)"
                    ),
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="HTML"
                )

        elif query.data == "instruction":
            bot_stats["help_requests"] += 1
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu")]]
            await query.message.reply_text(
                text=(
                    "üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º</b>\n\n"
                    "1. –ó–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 1win games –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –Ω—É–∂–Ω—É—é –≤–∞–º.\n"
                    "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≤—É—à–µ–∫: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∏–≥—Ä—ã. –≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ!\n"
                    "3. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Å–∏–≥–Ω–∞–ª –≤ –±–æ—Ç–µ, —É–∫–∞–∑–∞–≤, —Å–∫–æ–ª—å–∫–æ –ª–æ–≤—É—à–µ–∫ –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏.\n"
                    "4. –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ—É–¥–∞—á–Ω—ã–º, —Å–æ–≤–µ—Ç—É–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–∞–≤–∫—É –≤ –¥–≤–∞ —Ä–∞–∑–∞ (–•¬≤), —á—Ç–æ–±—ã –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–µ—Ä–∏.\n\n"
                    "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ</b>: –Ω–µ –≤—Å–µ–≥–¥–∞ —Å—Ç–æ–∏—Ç —É–¥–≤–∞–∏–≤–∞—Ç—å —Å—Ç–∞–≤–∫—É. –ò–Ω–æ–≥–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑—ã –∏–º–µ—é—Ç –º–Ω–æ–≥–æ –∑–≤—ë–∑–¥–æ—á–µ–∫, –∏ –º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è—Ç—å –±–∞–Ω–∫, –µ—Å–ª–∏ –Ω–µ —Å–æ–±–ª—é–¥–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –≤–∞—à –∫–∞–ø–∏—Ç–∞–ª –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏! üíπ"
                ),
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )

        elif query.data == "help":
            bot_stats["help_requests"] += 1
            keyboard = [
                [InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å —Ö–µ–ª–ø–µ—Ä—É", url="https://t.me/easycash_helper")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu")]
            ]
            await query.message.reply_text(
                text="üÜò –ü–æ–º–æ—â—å\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @easycash_helper",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=None
            )

        elif query.data == "menu":
            user = query.from_user
            keyboard = [
                [InlineKeyboardButton("üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")],
                [InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal")],
                [InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="help")]
            ]
            with open(WELCOME_IMAGE, 'rb') as photo:
                await query.message.reply_photo(
                    photo=InputFile(photo),
                    caption=f"üëã{user.first_name}, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>EASYCASH SOFT BOT</b>!\n\n"
                            "üí£ –í –±–æ—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ 20 –∏–≥—Ä: Mines, Luckyjet, Coinflip –∏ –¥—Ä—É–≥–∏–µ —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º –≥–µ–π–º–ø–ª–µ–µ–º, –≥–¥–µ –º–æ–∂–Ω–æ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É.\n\n"
                            "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø–µ—Ä–µ–¥–æ–≤–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ - Chat GPT 4o, –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—è —Ö–æ–¥—ã —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="HTML"
                )
            await query.message.delete()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {str(e)}", exc_info=True)
        await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        if user.id != ADMIN_ID:
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        stats_text = (
            "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(bot_stats['total_users'])}\n"
            f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(bot_stats['active_sessions'])}\n"
            f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {bot_stats['signals_sent']}\n"
            f"üÜò –ó–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–º–æ—â–∏: {bot_stats['help_requests']}\n\n"
            f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}"
        )
        await update.message.reply_text(stats_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stats: {str(e)}")

# ======= –ó–ê–ü–£–°–ö ==========
def main():
    try:
        app = ApplicationBuilder().token(TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("stats", stats))
        app.add_handler(CallbackQueryHandler(button_handler))
        logger.info("üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã...")
        app.run_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        print(f"üî¥ –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
